# -*- coding: utf-8 -*-
# @File    : base_client.py
# @AUTH    : model_creater

import os
import thriftpy2
from rpc.pool import register_thrift_pool, get_thrift_pool

rpc_dir = os.path.abspath(os.path.dirname(__file__))
{{app.name | lower}}_thrift = thriftpy2.load(rpc_dir + "/protocols/main.thrift", module_name="{{app.name | lower}}_thrift")
register_thrift_pool('{{app.name | title}}', {{app.name | lower}}_thrift.{{app.name | title}}Service, replace=False)

{% for klass in app.klasses %}
{{ 'async ' if aio }}def create_{{klass.name | lower}}(**kwargs):
    {{klass.name | lower}} = {{app.name | lower}}_thrift.model.{{klass.name}}()
    {{klass.name | lower}}.__dict__.update(kwargs)
    {{ 'async ' if aio }}with get_thrift_pool('{{app.name | title}}').get_client() as client:
        result = {{ 'await ' if aio }}client.create_{{app.name | lower}}_{{klass.name | lower}}({{klass.name | lower}})
        return result


{{ 'async ' if aio }}def update_{{klass.name | lower}}(id, **kwargs):
    {{klass.name | lower}} = {{app.name | lower}}_thrift.model.{{klass.name}}()
    {{klass.name | lower}}.__dict__.update(kwargs)
    {{ 'async ' if aio }}with get_thrift_pool('{{app.name | title}}').get_client() as client:
        result = {{ 'await ' if aio }}client.update_{{app.name | lower}}_{{klass.name | lower}}(id, {{klass.name | lower}})
        return result


{{ 'async ' if aio }}def delete_{{klass.name | lower}}(id):
    {{ 'async ' if aio }}with get_thrift_pool('{{app.name | title}}').get_client() as client:
        result = {{ 'await ' if aio }}client.delete_{{app.name | lower}}_{{klass.name | lower}}(id)
        return result


{{ 'async ' if aio }}def select_{{klass.name | lower}}(id):
    {{ 'async ' if aio }}with get_thrift_pool('{{app.name | title}}').get_client() as client:
        result = {{ 'await ' if aio }}client.select_{{app.name | lower}}_{{klass.name | lower}}(id)
        if result.{{klass.name | lower}}:
            result_object = result.{{klass.name | lower}}
            if result_object:
                result.{{klass.name | lower}} = {
                    "id": result_object.id,
                    {% for field in klass.fields %}
                        {% if field.field_type == "datetime" %}
                    "{{field.name}}": datetime.strptime(result_object.{{field.name}}, '%Y-%m-%d %H:%M:%S.%f'),
                        {% elif field.field_type == "str" %}
                    "{{field.name}}": result_object.{{field.name}},
                        {% elif field.field_type == "int" %}
                    "{{field.name}}": result_object.{{field.name}},
                        {% elif field.field_type == "list" %}
                            {% if field.field_detail_type == "str" %}
                    "{{field.name}}": result_object.{{field.name}},
                            {% elif field.field_detail_type == "int" %}
                    "{{field.name}}": result_object.{{field.name}},
                            {% elif field.field_detail_type == "objectid" %}
                    "{{field.name}}": result_object.{{field.name}},
                            {% elif field.field_detail_type == "dict" %}
                    "{{field.name}}": [json.loads(i) for i in result_object.{{field.name}}],
                            {% else %}
                    "{{field.name}}": result_object.{{field.name}},
                            {% endif %}
                        {% elif field.field_type == "dict" %}
                    "{{field.name}}": json.loads(result_object.{{field.name}}),
                        {% elif field.field_type == "boolean" %}
                    "{{field.name}}": result_object.{{field.name}},
                        {% elif field.field_type == "objectid" %}
                    "{{field.name}}": result_object.{{field.name}},
                        {% else %}
                    "{{field.name}}": result_object.{{field.name}},
                        {% endif %}
                    {% endfor %}
                }
        return result


{{ 'async ' if aio }}def search_{{klass.name | lower}}(search):
    {{ 'async ' if aio }}with get_thrift_pool('{{app.name | title}}').get_client() as client:
        result = {{ 'await ' if aio }}client.search_{{app.name | lower}}_{{klass.name | lower}}(search)
        result_object_list = []
        for {{klass.name | lower}} in result.{{klass.name | lower}}_list:
            result_object_list.append({
                "id": {{klass.name | lower}}.id,
                {% for field in klass.fields %}
                    {% if field.field_type == "datetime" %}
                "{{field.name}}": datetime.strptime({{klass.name | lower}}.{{field.name}}, '%Y-%m-%d %H:%M:%S.%f'),
                    {% elif field.field_type == "str" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                    {% elif field.field_type == "int" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                    {% elif field.field_type == "list" %}
                        {% if field.field_detail_type == "str" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                        {% elif field.field_detail_type == "int" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                        {% elif field.field_detail_type == "objectid" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                        {% elif field.field_detail_type == "dict" %}
                "{{field.name}}": [json.loads(i) for i in {{klass.name | lower}}.{{field.name}}],
                        {% else %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                        {% endif %}
                    {% elif field.field_type == "dict" %}
                "{{field.name}}": json.loads({{klass.name | lower}}.{{field.name}}),
                    {% elif field.field_type == "boolean" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                    {% elif field.field_type == "objectid" %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                    {% else %}
                "{{field.name}}": {{klass.name | lower}}.{{field.name}},
                    {% endif %}
                {% endfor %}
            })
        result.{{klass.name | lower}}_list = result_object_list
        return result

{% endfor %}