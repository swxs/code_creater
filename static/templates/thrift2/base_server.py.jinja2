# -*- coding: utf-8 -*-
# @File    : base_server.py
# @AUTH    : model_creater

import os
import json
import thriftpy2
from common.Decorator.render import render_thrift
from apps.{{app.name | title}}.utils.{{app.name | title}} import {{app.name | title}}
from rpc.dispatcher import BaseDispatcher


rpc_dir = os.path.abspath(os.path.dirname(__file__))
{{app.name | lower}}_thrift = thriftpy2.load(rpc_dir + "/protocols/main.thrift", module_name="{{app.name | lower}}_thrift")

class Dispatcher(BaseDispatcher):
    {% for klass in app.klasses %}
    @render_thrift({{klass.name | lower}}_thrift.model.CreateResult)
    {{ 'async ' if aio }}def create_{{klass.name | lower}}_{{app.name | lower}}(self, **kwargs):
        result = {{klass.name | lower}}_thrift.CreateResult()
        {{app.name | lower}} = {{ 'await ' if aio }}{{app.name | title}}.create(**kwargs)
        result.code = 0
        result.msg = ""
        result.id = {{app.name | lower}}.id
        return result

    @render_thrift({{klass.name | lower}}_thrift.model.UpdateResult)
    {{ 'async ' if aio }}def update_{{klass.name | lower}}_{{app.name|lower}}(self, id, **kwargs):
        result = {{klass.name | lower}}_thrift.model.UpdateResult()
        {{app.name | lower}} = {{ 'await ' if aio }}{{app.name | title}}.select(id=id)
        {{app.name | lower}} = {{ 'await ' if aio }}{{app.name | lower}}.update(**kwargs)
        result.code = 0
        result.msg = ""
        result.id = {{app.name | lower}}.id
        return result

    @render_thrift({{klass.name | lower}}_thrift.model.DeleteResult)
    {{ 'async ' if aio }}def delete_{{klass.name | lower}}_{{app.name | lower}}(self, id):
        result = {{klass.name | lower}}_thrift.model.DeleteResult()
        {{app.name | lower}} = {{ 'await ' if aio }}{{app.name | title}}.select(id=id)
        {{ 'await ' if aio }}{{app.name | lower}}.delete()
        result.code = 0
        result.msg = ""
        result.count = 0
        return result

    @render_thrift({{klass.name | lower}}_thrift.model.Select{{app.name | title}}Result)
    {{ 'async ' if aio }}def select_{{klass.name | lower}}_{{app.name|lower}}(self, id):
        result = {{app.name | lower}}_thrift.model.Select{{app.name | title}}Result()
        {{app.name | lower}} = {{ 'await ' if aio }}{{app.name | title}}.select(id=id)
        result_object = {{klass.name | lower}}_thrift.model.{{app.name | title}}()
        result_object.id = str({{app.name | lower}}.id)
        {% for field in klass.fields %}
            {% if field.field_type == "datetime" %}
        result_object.{{field.name}} = {{klass.name|lower}}.{{field.name}}.strftime('%Y-%m-%d %H:%M:%S.%f')
            {% elif field.field_type == "str" %}
        result_object.{{field.name}} = {{klass.name|lower}}.{{field.name}}
            {% elif field.field_type == "int" %}
        result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
            {% elif field.field_type == "list" %}
                {% if field.field_detail_type == "str" %}
        result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                {% elif field.field_detail_type == "int" %}
        result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                {% elif field.field_detail_type == "objectid" %}
        result_object.{{field.name}} = [str(i) for i in {{klass.name|lower}}.{{field.name}}]
                {% elif field.field_detail_type == "dict" %}
        result_object.{{field.name}} = [json.dumps(i) for i in {{klass.name|lower}}.{{field.name}}]
                {% else %}
        result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                {% endif %}
            {% elif field.field_type == "dict" %}
        result_object.{{field.name}} = json.dumps({{klass.name|lower}}.{{field.name}})
            {% elif field.field_type == "boolean" %}
        result_object.{{field.name}} = {{klass.name|lower}}.{{field.name}}
            {% elif field.field_type == "objectid" %}
        result_object.{{field.name}} = str({{klass.name|lower}}.{{field.name}})
            {% else %}
        result_object.{{field.name}} = {{klass.name|lower}}.{{field.name}}
            {% endif %}
        {% endfor %}
        result.code = 0
        result.msg = ""
        result.{{klass.name|lower}} = result_object
        return result

    @render_thrift({{klass.name | lower}}_thrift.model.Search{{klass.name}}Result)
    {{ 'async ' if aio }}def search_{{klass.name | lower}}_{{klass.name | lower}}(self, search):
        result = {{klass.name | lower}}_thrift.model.Search{{klass.name}}Result()
        {{klass.name | lower}}_list = {{app.name | title}}.search()
        result_object_list = []
        {{ 'async ' if aio }}for {{klass.name|lower}} in {{klass.name | lower}}_list:
            result_object = {{klass.name | lower}}_thrift.model.{{app.name | title}}()
            result_object.id = str({{app.name | lower}}.id)
            {% for field in klass.fields %}
                {% if field.field_type == "datetime" %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}.strftime('%Y-%m-%d %H:%M:%S.%f')
                {% elif field.field_type == "str" %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                {% elif field.field_type == "int" %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                {% elif field.field_type == "list" %}
                    {% if field.field_detail_type == "str" %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                    {% elif field.field_detail_type == "int" %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                    {% elif field.field_detail_type == "objectid" %}
            result_object.{{field.name}} = [str(i) for i in {{klass.name | lower}}.{{field.name}}]
                    {% elif field.field_detail_type == "dict" %}
            result_object.{{field.name}} = [json.dumps(i) for i in {{klass.name | lower}}.{{field.name}}]
                    {% else %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                    {% endif %}
                {% elif field.field_type == "dict" %}
            result_object.{{field.name}} = json.dumps({{klass.name | lower}}.{{field.name}})
                {% elif field.field_type == "boolean" %}
            {{field.name}} = {{klass.name | lower}}.result_object.{{field.name}}
                {% elif field.field_type == "objectid" %}
            result_object.{{field.name}} = str({{klass.name | lower}}.{{field.name}})
                {% else %}
            result_object.{{field.name}} = {{klass.name | lower}}.{{field.name}}
                {% endif %}
            {% endfor %}
            result_object_list.append(result_object)
        result.code = 0
        result.msg = ""
        result.{{app.name|lower}}_list = result_object_list
        return result

{% endfor %}


if __name__ == '__main__':
    from rpc.main import make_server
    server = make_server(
        port=5000,
        module_list=['apps.{{klass.name}}.rpc.base_server']
    )
    server.serve()