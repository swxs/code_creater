# -*- coding: utf-8 -*-
# @File    : {{klass.name}}.py
# @AUTH    : model_creater

import datetime
from umongo import Instance, Document, fields
from ..consts.{{klass.name}} import *
{% if klass.meta.values.get("parent") %}
from .{{klass.meta.values.get("parent") | title}} import {{klass.meta.values.get("parent") | title}}
{% else %}
from ...BaseModel import BaseModelDocument
{% endif %}
from settings import instance


@instance.register
{% if klass.meta.values.get("parent") %}
class {{klass.name}}({{klass.meta.values.get("parent") | title}}):
{% else %}
class {{klass.name}}(BaseModelDocument):
{% endif %}
    {% for field in klass.fields %}
    {% if field.field_type == "datetime" %}
    {{field.name}} = fields.DateTimeField({{field|get_model_params(klass)}})
    {% elif field.field_type == "str" %}
    {{field.name}} = fields.StringField({{field|get_model_params(klass)}})
    {% elif field.field_type == "int" %}
    {{field.name}} = fields.IntField({{field|get_model_params(klass)}})
    {% elif field.field_type == "list" %}
    {{field.name}} = fields.ListField({{field|get_model_params(klass)}})
    {% elif field.field_type == "dict" %}
    {{field.name}} = fields.DictField({{field|get_model_params(klass)}})
    {% elif field.field_type == "boolean" %}
    {{field.name}} = fields.BooleanField({{field|get_model_params(klass)}})
    {% elif field.field_type == "objectid" %}
    {{field.name}} = fields.ObjectIdField({{field|get_model_params(klass)}})
    {% else %}
    {{field.name}} = fields.StringField({{field|get_model_params(klass)}})
    {% endif %}
    {% endfor %}
    {% if klass.meta.values %}

    class Meta:
        {% if klass.meta.values.get("index_list") %}
        indexes = [
            {% for index in klass.meta.values.get("index_list") %}
            {
                'key': [{{index | get_index_params}}],
                {% if index["is_uniq"] %}
                'unique': True,
                {% endif %}
            },
            {% endfor %}
        ]
        {% endif %}
        {% if klass.meta.values.get("allow_inheritance") %}
        allow_inheritance = True
        {% endif %}
        pass
    {% endif %}
