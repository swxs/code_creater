# -*- coding: utf-8 -*-
# @File    : dao/{{klass.name | lower}}.py
# @AUTH    : code_creater

{% if klass.meta.values.get("import_list") %}
    {% for import_ in klass.meta.values.get("import_list") %}
import {{import_.name}}
    {% endfor %}
{% endif %}

import logging
from dao import BaseDocument, fields

# 本模块方法
from .. import consts
from ..models.{{klass.name | lower}} import {{klass.name}} as {{klass.name}}Model

logger = logging.getLogger("main.apps.{{app.name | lower}}.dao.{{klass.name | lower}}")


class {{klass.name}}(BaseDocument):
{% for field in klass.fields %}
    {% if field.field_type == "primary" %}
    {{field.name}} = fields.PrimaryField({{field|get_dao_params(klass)}})
    {% elif field.field_type == "objectid" %}
    {{field.name}} = fields.ObjectIdField({{field|get_dao_params(klass)}})
    {% elif field.field_type == "str" %}
    {{field.name}} = fields.StringField({{field|get_dao_params(klass)}})
    {% elif field.field_type == "boolean" %}
    {{field.name}} = fields.BooleanField({{field|get_dao_params(klass)}})    
    {% elif field.field_type == "int" %}
    {{field.name}} = fields.IntField({{field|get_dao_params(klass)}})
    {% elif field.field_type == "float" %}
    {{field.name}} = fields.FloatField({{field|get_dao_params(klass)}})    
    {% elif field.field_type == "datetime" %}
    {{field.name}} = fields.DateTimeField({{field|get_dao_params(klass)}})    
    {% elif field.field_type == "list" %}
    {{field.name}} = fields.ListField({{field|get_dao_params(klass)}})
    {% elif field.field_type == "dict" %}
    {{field.name}} = fields.DictField({{field|get_dao_params(klass)}})
    {% else %}
    {{field.name}} = fields.StringField({{field|get_dao_params(klass)}})
    {% endif %}
{% endfor %}

    class Meta:
        model = {{klass.name}}Model
        manager = "umongo_motor"
        memorizer = "none"

    def __init__(self, **kwargs):
        super({{klass.name}}, self).__init__(**kwargs)
