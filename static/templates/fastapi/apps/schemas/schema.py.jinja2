# -*- coding: utf-8 -*-
# @FILE    : schemas/{{klass.name | lower}}.py
# @AUTH    : model_creater

import datetime
from typing import Dict, List, Optional

import pydantic
from bson import ObjectId
from fastapi import Query

from web.custom_types import OID


class {{klass.name}}Schema(pydantic.BaseModel):
    class Config:
        arbitrary_types_allowed = True

{% for field in klass.fields %}
    {% if field.virtual < 1 %}
        {% if field.field_type == "str" %}
    {{field.name}}: Optional[str] = None
        {% elif field.field_type == "boolean" %}
    {{field.name}}: Optional[bool] = None    
        {% elif field.field_type == "int" %}
    {{field.name}}: Optional[int] = None
        {% elif field.field_type == "float" %}
    {{field.name}}: Optional[float] = None
        {% elif field.field_type == "datetime" %}
    {{field.name}}: Optional[datetime.datetime] = None
        {% elif field.field_type == "list" %}
    {{field.name}}: Optional[List] = None
        {% elif field.field_type == "dict" %}
    {{field.name}}:Optional[Dict] = None
        {% elif field.field_type == "objectid" %}
    {{field.name}}: Optional[OID] = None
        {% else %}
    {{field.name}}: Optional[str] = None
        {% endif %}
    {% endif %}
{% endfor %}


async def get_{{klass.name | lower}}_schema(
{% for field in klass.fields %}
    {% if field.virtual < 1 %}
        {% if field.field_type == "str" %}
    {{field.name}}: Optional[str] = Query(None),
        {% elif field.field_type == "boolean" %}
    {{field.name}}: Optional[str] = Query(None),    
        {% elif field.field_type == "int" %}
    {{field.name}}: Optional[str] = Query(None),
        {% elif field.field_type == "float" %}
    {{field.name}}: Optional[str] = Query(None),
        {% elif field.field_type == "datetime" %}
    {{field.name}}: Optional[str] = Query(None),
        {% elif field.field_type == "list" %}
    {% elif field.field_type == "dict" %}
        {% else %}
    {{field.name}}: Optional[str] = Query(None),
        {% endif %}
    {% endif %}
{% endfor %}
):
    params = {}
{% for field in klass.fields %}
    {% if field.virtual < 1 %}
        {% if field.field_type == "dict" %}
        {% else %}
    if {{field.name}} is not None:
        params["{{field.name}}"] = {{field.name}}
        {% endif %}
    {% endif %}
{% endfor %}

    return {{klass.name}}Schema(**params)
